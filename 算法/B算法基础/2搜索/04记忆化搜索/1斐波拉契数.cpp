// 力扣 509

// 如何实现记忆化搜索
// 1.创建备忘录
// 2.递归返回的时候，先存到备忘录里面
// 3.递归的时候，先往备忘录里面瞅一瞅

// 递归的过程中, 出现了大量“完全相同的问题”
#include <cstring>
class Solution 
{
    int f[35];// 备忘录，存储斐波那契数列计算结果
    // 从代码来看，错误提示（波浪线）是因为 memset(f, -1, sizeof f); 
    //这行代码的位置不对。在 C++ 中，非静态成员变量的初始化不能直接放在类的声明中，
    //memset 这样的操作需要放在构造函数或者其他成员函数里。
public:
    // 构造函数：对象创建时初始化备忘录
    Solution()
    {
        // 用 -1 标记未计算的状态
        memset(f, -1, sizeof f);
    }
    int fib(int n)
    {
        // 如果已经计算过，直接返回结果
        if(f[n] !=-1) return f[n];
        // 递归终止条件：f(0)=0，f(1)=1
        if(n == 0 || n == 1) return n;
        // 递归计算并缓存结果
        return f[n] = fib(n - 1) + fib(n - 2); 
          
    }
};